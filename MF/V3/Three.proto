syntax = "proto3";

import "MF/V3/Tasks/AddMergeToProject.proto";
import "MF/V3/Tasks/Align.proto";
import "MF/V3/Tasks/AutoFocus.proto";
import "MF/V3/Tasks/BoundingBox.proto";
import "MF/V3/Tasks/CalibrationCaptureTargets.proto";
import "MF/V3/Tasks/CalibrateCameras.proto";
import "MF/V3/Tasks/CalibrateTurntable.proto";
import "MF/V3/Tasks/CameraCalibration.proto";
import "MF/V3/Tasks/CaptureImage.proto";
import "MF/V3/Tasks/CloseProject.proto";
import "MF/V3/Tasks/CopyGroups.proto";
import "MF/V3/Tasks/ConnectWifi.proto";
import "MF/V3/Tasks/DepthMap.proto";
import "MF/V3/Tasks/DetectCalibrationCard.proto";
import "MF/V3/Tasks/DownloadProject.proto";
import "MF/V3/Tasks/Export.proto";
import "MF/V3/Tasks/ExportHeatMap.proto";
import "MF/V3/Tasks/ExportLogs.proto";
import "MF/V3/Tasks/ExportMerge.proto";
import "MF/V3/Tasks/FlattenGroup.proto";
import "MF/V3/Tasks/ForgetWifi.proto";
import "MF/V3/Tasks/HasCameras.proto";
import "MF/V3/Tasks/HasProjector.proto";
import "MF/V3/Tasks/HasTurntable.proto";
import "MF/V3/Tasks/HeatMap.proto";
import "MF/V3/Tasks/ListExportFormats.proto";
import "MF/V3/Tasks/ListGroups.proto";
import "MF/V3/Tasks/ListNetworkInterfaces.proto";
import "MF/V3/Tasks/ListProjects.proto";
import "MF/V3/Tasks/ListScans.proto";
import "MF/V3/Tasks/ListSettings.proto";
import "MF/V3/Tasks/ListWifi.proto";
import "MF/V3/Tasks/Merge.proto";
import "MF/V3/Tasks/MergeData.proto";
import "MF/V3/Tasks/MoveGroup.proto";
import "MF/V3/Tasks/NewGroup.proto";
import "MF/V3/Tasks/NewProject.proto";
import "MF/V3/Tasks/NewScan.proto";
import "MF/V3/Tasks/OpenProject.proto";
import "MF/V3/Tasks/PopSettings.proto";
import "MF/V3/Tasks/PushSettings.proto";
import "MF/V3/Tasks/Reboot.proto";
import "MF/V3/Tasks/RemoveGroups.proto";
import "MF/V3/Tasks/RemoveProjects.proto";
import "MF/V3/Tasks/RestoreFactoryCalibration.proto";
import "MF/V3/Tasks/RotateTurntable.proto";
import "MF/V3/Tasks/ScanData.proto";
import "MF/V3/Tasks/SetCameras.proto";
import "MF/V3/Tasks/SetGroup.proto";
import "MF/V3/Tasks/SetProject.proto";
import "MF/V3/Tasks/SetProjector.proto";
import "MF/V3/Tasks/Shutdown.proto";
import "MF/V3/Tasks/SystemInfo.proto";
import "MF/V3/Tasks/SplitGroup.proto";
import "MF/V3/Tasks/StartVideo.proto";
import "MF/V3/Tasks/StopVideo.proto";
import "MF/V3/Tasks/TransformGroup.proto";
import "MF/V3/Tasks/TurntableCalibration.proto";
import "MF/V3/Tasks/UpdateSettings.proto";
import "MF/V3/Tasks/UploadProject.proto";

package MF.V3;

// Three scanner API.
service Three
{

// List available wifi networks.
rpc ListNetworkInterfaces(Tasks.ListNetworkInterfaces.Request) returns (Tasks.ListNetworkInterfaces.Response);

// List available wifi networks.
rpc ListWifi(Tasks.ListWifi.Request) returns (Tasks.ListWifi.Response);

// Connect to a wifi network.
rpc ConnectWifi(Tasks.ConnectWifi.Request) returns (Tasks.ConnectWifi.Response);

// Forget all wifi connections.
rpc ForgetWifi(Tasks.ForgetWifi.Request) returns (Tasks.ForgetWifi.Response);

// Get scanner settings.
rpc ListSettings(Tasks.ListSettings.Request) returns (Tasks.ListSettings.Response);

// Push the current scanner settings to the settings stack.
rpc PushSettings(Tasks.PushSettings.Request) returns (Tasks.PushSettings.Response);

//  Pop and restore scanner settings from the settings stack.
rpc PopSettings(Tasks.PopSettings.Request) returns (Tasks.PopSettings.Response);

// Update scanner settings.
rpc UpdateSettings(Tasks.UpdateSettings.Request) returns (Tasks.UpdateSettings.Response);

// List all projects.
rpc ListProjects(Tasks.ListProjects.Request) returns (Tasks.ListProjects.Response);

// Download a project from the scanner.
rpc DownloadProject(Tasks.DownloadProject.Request) returns (Tasks.DownloadProject.Response);

// Upload a project to the scanner.
rpc UploadProject(Tasks.UploadProject.Request) returns (Tasks.UploadProject.Response);

// Create a new project.
rpc NewProject(Tasks.NewProject.Request) returns (Tasks.NewProject.Response);

// Open an existing project.
rpc OpenProject(Tasks.OpenProject.Request) returns (Tasks.OpenProject.Response);

// Close the current open project.
rpc CloseProject(Tasks.CloseProject.Request) returns (Tasks.CloseProject.Response);

// Copy a set of scan groups in the current open project.
rpc CopyGroups(Tasks.CopyGroups.Request) returns (Tasks.CopyGroups.Response);

// Remove selected projects.
rpc RemoveProjects(Tasks.RemoveProjects.Request) returns (Tasks.RemoveProjects.Response);

// List the scan groups in the current open project.
rpc ListGroups(Tasks.ListGroups.Request) returns (Tasks.ListGroups.Response);

// List the scans in the current open project.
rpc ListScans(Tasks.ListScans.Request) returns (Tasks.ListScans.Response);

// Download the raw scan data for a scan in the current open project.
rpc ScanData(Tasks.ScanData.Request) returns (Tasks.ScanData.Response);

// Apply settings to the current open project.
rpc SetProject(Tasks.SetProject.Request) returns (Tasks.SetProject.Response);

// Set scan group properties.
rpc SetGroup(Tasks.SetGroup.Request) returns (Tasks.SetGroup.Response);

// Create a new scan group.
rpc NewGroup(Tasks.NewGroup.Request) returns (Tasks.NewGroup.Response);

// Move a scan group.
rpc MoveGroup(Tasks.MoveGroup.Request) returns (Tasks.MoveGroup.Response);

// Flatten a scan group such that it only consists of single scans.
rpc FlattenGroup(Tasks.FlattenGroup.Request) returns (Tasks.FlattenGroup.Response);

// Split a scan group (ie. move its subgroups to its parent group).
rpc SplitGroup(Tasks.SplitGroup.Request) returns (Tasks.SplitGroup.Response);

// Apply a rigid transformation to a group.
rpc TransformGroup(Tasks.TransformGroup.Request) returns (Tasks.TransformGroup.Response);

// Remove selected scan groups.
rpc RemoveGroups(Tasks.RemoveGroups.Request) returns (Tasks.RemoveGroups.Response);

// Get the bounding box of a set of scan groups.
rpc BoundingBox(Tasks.BoundingBox.Request) returns (Tasks.BoundingBox.Response);

// Align two scan groups.
rpc Align(Tasks.Align.Request) returns (Tasks.Align.Response);

// Compute the point-to-mesh distances of a source mesh to a target mesh and visualize as a heat map.
rpc HeatMap(Tasks.HeatMap.Request) returns (Tasks.HeatMap.Response);

// Merge two or more scan groups.
rpc Merge(Tasks.Merge.Request) returns (Tasks.Merge.Response);

// Download the raw scan data for the current merge process.
rpc MergeData(Tasks.MergeData.Request) returns (Tasks.MergeData.Response);

// Add a merged scan to the current project.
rpc AddMergeToProject(Tasks.AddMergeToProject.Request) returns (Tasks.AddMergeToProject.Response);

// List all export formats.
rpc ListExportFormats(Tasks.ListExportFormats.Request) returns (Tasks.ListExportFormats.Response);

// Export a group of scans.
rpc Export(Tasks.Export.Request) returns (Tasks.Export.Response);

// Export a mesh with vertex colors generated by the 'HeatMap' task.
rpc ExportHeatMap(Tasks.ExportHeatMap.Request) returns (Tasks.ExportHeatMap.Response);

// Export a merged scan.
rpc ExportMerge(Tasks.ExportMerge.Request) returns (Tasks.ExportMerge.Response);

// Export scanner logs.
rpc ExportLogs(Tasks.ExportLogs.Request) returns (Tasks.ExportLogs.Response);

// Check if the scanner has working cameras.
rpc HasCameras(Tasks.HasCameras.Request) returns (Tasks.HasCameras.Response);

// Check if the scanner has a working projector.
rpc HasProjector(Tasks.HasProjector.Request) returns (Tasks.HasProjector.Response);

// Check if the scanner is connected to a working turntable.
rpc HasTurntable(Tasks.HasTurntable.Request) returns (Tasks.HasTurntable.Response);

// Get system information.
rpc SystemInfo(Tasks.SystemInfo.Request) returns (Tasks.SystemInfo.Response);

// Get the camera calibration descriptor.
rpc CameraCalibration(Tasks.CameraCalibration.Request) returns (Tasks.CameraCalibration.Response);

// Get the turntable calibration descriptor.
rpc TurntableCalibration(Tasks.TurntableCalibration.Request) returns (Tasks.TurntableCalibration.Response);

// Get the calibration capture target for each camera calibration capture.
rpc CalibrationCaptureTargets(Tasks.CalibrationCaptureTargets.Request) returns (Tasks.CalibrationCaptureTargets.Response);

// Calibrate the cameras.
rpc CalibrateCameras(Tasks.CalibrateCameras.Request) returns (Tasks.CalibrateCameras.Response);

// Calibrate the turntable.
rpc CalibrateTurntable(Tasks.CalibrateTurntable.Request) returns (Tasks.CalibrateTurntable.Response);

// Detect the calibration card on one or both cameras.
rpc DetectCalibrationCard (Tasks.DetectCalibrationCard.Request) returns (Tasks.DetectCalibrationCard.Response);

// Restore factory calibration.
rpc RestoreFactoryCalibration(Tasks.RestoreFactoryCalibration.Request) returns (Tasks.RestoreFactoryCalibration.Response);

// Start the video stream.
rpc StartVideo(Tasks.StartVideo.Request) returns (Tasks.StartVideo.Response);

// Stop the video stream.
rpc StopVideo(Tasks.StopVideo.Request) returns (Tasks.StopVideo.Response);

// Apply camera settings to one or both cameras.
rpc SetCameras(Tasks.SetCameras.Request) returns (Tasks.SetCameras.Response);

// Apply projector settings.
rpc SetProjector(Tasks.SetProjector.Request) returns (Tasks.SetProjector.Response);

// Auto focus one or both cameras.
rpc AutoFocus(Tasks.AutoFocus.Request) returns (Tasks.AutoFocus.Response);

// Rotate the turntable.
rpc RotateTurntable(Tasks.RotateTurntable.Request) returns (Tasks.RotateTurntable.Response);

// Capture a new scan.
rpc NewScan(Tasks.NewScan.Request) returns (Tasks.NewScan.Response);

// Capture a single Image.
rpc CaptureImage(Tasks.CaptureImage.Request) returns (Tasks.CaptureImage.Response);

// Capture a depth map.
rpc DepthMap(Tasks.DepthMap.Request) returns (Tasks.DepthMap.Response);

// Reboot the scanner.
rpc Reboot(Tasks.Reboot.Request) returns (Tasks.Reboot.Response);

// Shutdown the scanner.
rpc Shutdown(Tasks.Shutdown.Request) returns (Tasks.Shutdown.Response);

}

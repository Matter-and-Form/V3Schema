syntax = "proto3";

import "MF/V3/Task.proto";
import "MF/V3/Settings/Import.proto";

package MF.V3.Tasks;

/**
 * Import a set of 3D meshes to the current open project.  The meshes must be archived in a ZIP file.  Supported formats are DAE, FBX, GLB, OBJ, PLY and STL.
 * 
 * > Request example:
 *
 * ```json
 * {
 *     "Task":{
 *         "Index":1,
 *         "Type":"Import",
 *         "Input":{"unit":"Inch"}
 *     }
 * }
 * ```
 * 
 * > Buffer message from client.
 *
 * ```json
 * {
 *     "Buffer":{
 *         "Index":0,
 *         "Size":1052,
 *         "Task":{
 *             "Index":1,
 *             "Type":"Import",
 *             "Input":{"unit":"Inch"}
 *         }
 *     }
 * }
 * ```
 * 
 * > Binary data transfer from client: The mesh zip file [1052 bytes].
 * > Response example:
 * 
 * ```json
 * {
 *     "Task":{
 *         "Index":1,
 *         "Type":"Import",
 *         "Input":{"unit":"Inch"},
 *         "Output":{"groups":[{"index":1,"name":"box","scan":1}]},
 *         "State":"Completed"
 *     }
 * }
 * ```
 */
message Import
{

// Client request for the `Import` task.
message Request
{
    // A unique identifier generated by the client.
    int32 Index = 1;

    // "Import"
    string Type = 2;
    
    // Import settings.
    optional Settings.Import Input = 3;
}

// Server response for the `Import` task.
message Response
{
    // The unique identifier generated by the client.
    int32 Index = 1;

    // "Import"
    string Type = 2;
    
    // Requested export settings.
    optional Settings.Import Input = 3;

    // The current state of the task.
    optional TaskState State = 4;

    // A string describing the error if the task has failed.
    optional string Error = 5;
}

// Client buffer message for the `Import` task.
message Buffer
{
    // The zero-based index identifying the data buffer.
    int32 Index = 1;

    // The size of the incoming data buffer in bytes.
    uint64 Size = 2;

    // The requested Import task.
    Task Task = 3;
}

}

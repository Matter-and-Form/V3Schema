syntax = "proto3";

import "MF/V3/Task.proto";
import "MF/V3/Settings/Merge.proto";
import "MF/V3/Descriptors/Merge.proto";

package MF.V3.Tasks;

/**
 * Merge two or more scan groups.
 * 
 * > Request example:
 *
 * ```json
 * {
 *     "Task":{
 *         "Index":1,
 *         "Type":"Merge",
 *         "Input":{
 *             "selection":{"mode":"visible"},
 *             "remesh":{
 *                 "method": "FlowTriangles",
 *                 "quality": "Medium"
 *             },
 *             "simplify":{"triangleCount": 20000 }
 *         }
 *     }
 * }
 * ```
 *
 * > Response example:
 *
 * ```json
 * {
 *     "Task":{
 *         "Index":1,
 *         "Type":"Merge",
 *         "Input":{
 *             "selection":{"mode":"visible"},
 *             "remesh":{
 *                 "method": "FlowTriangles",
 *                 "quality": "Medium"
 *             },
 *             "simplify":{"triangleCount": 20000 }
 *         },
 *         "Output":{
 *             "meshes":[
 *                 {
 *                     "name":"Combined",
 *                     "positions":237757,
 *                     "normals":237757,
 *                     "triangles":459622,
 *                     "size":11221632
 *                 },
 *                 {
 *                     "name":"Remeshed",
 *                     "positions":34311,
 *                     "normals":0,
 *                     "triangles":29738,
 *                     "size":945540
 *                 },
 *                 {
 *                     "name":"Simplified",
 *                     "positions":32415,
 *                     "normals":0,
 *                     "triangles":20000,
 *                     "size":628980
 *                 }
 *             ],
 *             "scans":3,
 *             "textures":3
 *         },
 *         "State":"Completed"
 *     }
 * }
 * ```
 */
message Merge
{

// Client request for the `Merge` task.
message Request
{
    // A unique identifier generated by the client.
    int32 Index = 1;

    // "Merge"
    string Type = 2;

    // The merge settings.
    Settings.Merge Input = 3;
}

// Server response for the `Merge` task.
message Response
{
    // The unique identifier generated by the client.
    int32 Index = 1;

    // "Merge"
    string Type = 2;

    // The requested merge settings.
    Settings.Merge Input = 3;

    // The merge descriptor.
    Descriptors.Merge Output = 4;

    // The current state of the task.
    optional TaskState State = 5;

    // A string describing the error if the task has failed.
    optional string Error = 6;
}

}

syntax = "proto3";

import "MF/V3/Task.proto";
import "MF/V3/Settings/HeatMap.proto";
import "MF/V3/Descriptors/HeatMap.proto";

package MF.V3.Tasks;

/**
 * Compute the point-to-mesh distances of a source mesh to a target mesh and visualize as a heat map.
 * 
 * > Request example:
 *
 * ```json
 * {
 *     "Task":{
 *         "Index":1,
 *         "Type":"HeatMap",
 *         "Input":{"sources":[2],"targets":[3]}
 *     }
 * }
 * ```
 *
 * > Vertex position buffer message from server.
 *
 * ```json
 * {
 *     "Buffer":{
 *         "Index":0,
 *         "Size":1558188,
 *         "Descriptor":{
 *             "components":[{
 *                 "type":"Position"
 *                 "size":3,
 *                 "offset":0,
 *                 "normalized":false,
 *             }],
 *             "stride":3
 *         },
 *         "Task":{
 *             "Index":1,
 *             "Type":"HeatMap",
 *             "Input":{"sources":[2],"targets":[3]}
 *         }
 *     }
 * }
 * ```
 *
 * > Vertex position binary data transfer from server [1558188 bytes].
 *
 * > Vertex quality buffer message from server.
 *
 * ```json
 * {
 *     "Buffer":{
 *         "Index":0,
 *         "Size":1558188,
 *         "Descriptor":{
 *             "components":[{
 *                 "type":"Quality"
 *                 "size":3,
 *                 "offset":0,
 *                 "normalized":false,
 *             }],
 *             "stride":3
 *         },
 *         "Task":{
 *             "Index":1,
 *             "Type":"HeatMap",
 *             "Input":{"sources":[2],"targets":[3]}
 *         }
 *     }
 * }
 * ```
 *
 * > Vertex quality binary data transfer from server [1558188 bytes].
 *
 * > Triangle index buffer message from server.
 *
 * ```json
 * {
 *     "Buffer":{
 *         "Index":4,
 *         "Size":1996356,
 *         "Descriptor":{
 *             "components":[{
 *                 "type":"Triangle"
 *                 "size":1,
 *                 "offset":0,
 *                 "normalized":false,
 *             }],
 *             "stride":1
 *         },
 *         "Task":{
 *             "Index":1,
 *             "Type":"HeatMap",
 *             "Input":{"sources":[2],"targets":[3]}
 *         }
 *     }
 * }
 * ```
 *
 * > Triangle index binary data transfer from server [1996356 bytes].
 *
 * > Response example:
 *
 * ```json
 * {
 *     "Task":{
 *         "Index":1,
 *         "Type":"HeatMap",
 *         "Input":{"sources":[2],"targets":[3]},
 *         "Output":{
 *             "count":96564,
 *              "max":32.734107971191406,
 *              "mean":1.964127540588379,
 *              "median":0.12784385681152344,
 *              "min":9.611248970031738e-07,
 *              "outlierDistance":0.0,
 *              "stddev":4.970643997192383
 *         },
 *         "State":"Completed"
 *     }
 * }
 * ```
 */
message HeatMap
{

// Client request for the `HeatMap` task.
message Request
{
    // A unique identifier generated by the client.
    int32 Index = 1;

    // "HeatMap"
    string Type = 2;

    // The heat map settings.
    Settings.HeatMap Input = 3;
}

// Server response for the `HeatMap` task.
message Response
{
    // The unique identifier generated by the client.
    int32 Index = 1;

    // "HeatMap"
    string Type = 2;

    // The requested heat map settings.
    Settings.HeatMap Input = 3;

    // The heat map descriptor.
    Descriptors.HeatMap Output = 4;

    // The current state of the task.
    optional TaskState State = 5;

    // A string describing the error if the task has failed.
    optional string Error = 6;
}

}

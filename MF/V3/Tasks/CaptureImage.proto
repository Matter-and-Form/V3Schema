syntax = "proto3";

import "MF/V3/Task.proto";
import "MF/V3/Settings/CaptureImage.proto";
import "MF/V3/Descriptors/CaptureImage.proto";

package MF.V3.Tasks;

/**
 * Capture an image from one or both cameras.
 * 
 * > Request example:
 *
 * ```json
 * {
 *     "Task":{
 *         "Index":1,
 *         "Type":"CaptureImage"
 *         "Input":{
 *             "selection":{0,1},
 *             "grayscale":false,
 *             "codec":jpg
 *         }
 *     }
 * }
 * ```
 *
 * > Buffer messages from server.
 *
 * ```json
 * {
 *     "Buffer":{
 *         "Descriptor":"{"camera":0,"codec":"jpg","grayscale":false,"height":1560,"step":6312,"width":2104},
 *         "Index":0,
 *         "Size":856664,
 *         "Task":{
 *             "Index":1,
 *             "Type":"CaptureImage",
 *             "Input":{"selection":{0,1}, "grayscale":false, "codec":jpg}
 *         }
 *     }
 * }
 * ```
 * ```json
 * {
 *     "Buffer":{
 *         "Descriptor":"{"camera":1,"codec":"jpg","grayscale":false,"height":1560,"step":6312,"width":2104},
 *         "Index":1,
 *         "Size":847726,
 *         "Task":{
 *             "Index":1,
 *             "Type":"CaptureImage",
 *             "Input":{"selection":{0,1}, "grayscale":false, "codec":jpg}
 *         }
 *     }
 * }
 * ```
 *
 * > Response example:
 *
 * ```json
 * {
 *     "Task":{
 *         "Index":1,
 *         "Type":"CaptureImage"
 *         "Input":{
 *             "selection":{0,1},
 *             "grayscale":false,
 *             "codec":jpg
 *         }
 *         "Output":[
 *             {"camera":0,"codec":"jpg","grayscale":false,"height":1560,"step":6312,"width":2104},
 *             {"camera":1,"codec":"jpg","grayscale":false,"height":1560,"step":6312,"width":2104}
 *          ],
 *         "State":"Completed"
 *     }
 * }
 * ```
 */
message CaptureImage
{

// Client request for the `CaptureImage` task.
message Request
{
    // A unique identifier generated by the client.
    int32 Index = 1;

    // "CaptureImage"
    string Type = 2;

    // Index of the project to download.
    int32 Input = 3;
}

// Server response for the `CaptureImage` task.
message Response
{
    // The unique identifier generated by the client.
    int32 Index = 1;

    // "CaptureImage"
    string Type = 2;

    // Requested capture image settings.s
    Settings.CaptureImage Input = 3;
    
    // A capture image descriptors for each selected camera.
    repeated Descriptors.CaptureImage Output = 4;

    // The current state of the task.
    optional TaskState State = 5;

    // A string describing the error if the task has failed.
    optional string Error = 6;
}

// Server buffer message for the `CaptureImage` task.
message Buffer
{
    // The zero-based index identifying the data buffer.
    int32 Index = 1;

    // The size of the incoming data buffer in bytes.
    uint64 Size = 2;

    // The requested CaptureImage task.
    Task Task = 3;

    // The capture image descriptor.
    Descriptors.CaptureImage Descriptor = 4; 
}
}

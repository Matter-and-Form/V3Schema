syntax = "proto3";

import "MF/V3/Task.proto";
import "MF/V3/Settings/Software.proto";
import "MF/V3/Descriptors/Software.proto";

package MF.V3;

/**
 * Get installed and available software versions.
 * 
 * Request example:
 * ```
 * {
 *     "Task":{
 *         "Index":1,
 *         "Type":"SoftwareVersion",
 *         "Input":{
 *             "installed":["server","frontend"],
 *             "available":["server","frontend"]
 *         }
 *     }
 * }
 * ```
 * Response example:
 * ```
 * {
 *     "Task":{
 *         "Index":1,
 *         "Type":"SoftwareVersion"
 *         "Input":{
 *             "installed":["server","frontend"],
 *             "available":["server","frontend"]
 *         }
 *         "Output":{
 *             "installed":[
 *                 {
 *                     "name":"server",
 *                     "version":{
 *                         "major":2,
 *                         "minor":21,
 *                         "patch":119,
 *                         "string":"2.21.119"
 *                     }
 *                 },
 *                 {
 *                     "name":"frontend",
 *                     "version":{
 *                         "major":2,
 *                         "minor":14,
 *                         "patch":39,
 *                         "string":"2.14.39"
 *                     }
 *                 }
 *             ]
 *         },
 *         "State":"Completed"
 *     }
 * }
 * ```
 */
message SoftwareVersion
{

// Client request for the `SoftwareVersion` task.
message Request
{
    // A unique identifier generated by the client.
    int32 Index = 1;

    // "SoftwareVersion"
    string Type = 2;

    // Software settings.
    optional Settings.Software Input = 3;
}

// Server response for the `SoftwareVersion` task.
message Response
{
    // The unique identifier generated by the client.
    int32 Index = 1;

    // "SoftwareVersion"
    string Type = 2;

    // The disk space descriptor.
    optional Descriptors.Software Output = 3;

    // The current state of the task.
    optional TaskState State = 4;

    // A string describing the error if the task has failed.
    optional string Error = 5;
}
}